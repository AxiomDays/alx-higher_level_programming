The ``1-my_list`` module
======================

Using ``MyList``
-------------------

Importing the function from the module:
        >>> MyList = __import__("1-my_list").MyList

# Test Case 1: Creating an empty MyList
# Input:
>>> my_list = MyList()
>>> len(my_list)
0

# Test Case 2: Adding elements to MyList
# Input:
>>> my_list.append(5)
>>> my_list.extend([1, 3, 2, 4])
# Expected Output:
>>> len(my_list)
5
>>> my_list
[5, 1, 3, 2, 4]

# Test Case 3: Sorting and printing the list
# Input:
>>> my_list.print_sorted()
# Expected Output:
>>> my_list
[5, 1, 3, 2, 4]  # The original list remains unchanged
# The output of the print_sorted method should be "1 2 3 4 5"

# Test Case 4: Sorting an empty MyList
# Input:
>>> empty_list = MyList()
>>> empty_list.print_sorted()
# Expected Output:
>>> empty_list
[]  # The original list remains empty

# Test Case 5: Sorting a MyList with duplicate elements
# Input:
>>> duplicate_list = MyList([4, 2, 4, 1, 3, 2])
>>> duplicate_list.print_sorted()
# Expected Output:
>>> duplicate_list
[4, 2, 4, 1, 3, 2]  # The original list remains unchanged
# The output of the print_sorted method should be "1 2 2 3 4 4"

# Test Case 6: Sorting a MyList with mixed types (numbers and strings)
# Input:
>>> mixed_list = MyList([3, 'apple', 1, 'banana', 2])
>>> mixed_list.print_sorted()
# Expected Output:
>>> mixed_list
[3, 'apple', 1, 'banana', 2]  # The original list remains unchanged
# The output of the print_sorted method should be "1 2 3 apple banana"

# Test Case 7: Sorting a MyList with custom objects (assuming __lt__ is implemented)
# Input:
>>> class CustomObject:
...     def __init__(self, value):
...         self.value = value
...
...     def __lt__(self, other):
...         return self.value < other.value
...
>>> custom_objects_list = MyList([CustomObject(3), CustomObject(1), CustomObject(2)])
>>> custom_objects_list.print_sorted()
# Expected Output:
>>> custom_objects_list
[CustomObject(3), CustomObject(1), CustomObject(2)]
# The output of the print_sorted method should be "1 2 3"

# Test Conclusion
>>> print("All test cases passed!")
